{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome home!","title":"Home"},{"location":"express-webpack-typescript/","text":"Express and Webpack with Typescript \u00b6 Directory \u00b6 --rets |--api |--app api \u00b6 package.json { \"name\": \"api\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"server.js\", \"type\": \"module\", \"scripts\": { \"dev\": \"nodemon\" }, \"dependencies\": { \"express\": \"^4.17.1\", \"http-proxy-middleware\": \"^1.0.4\" }, \"devDependencies\": { \"@types/express\": \"^4.17.11\", \"@types/node\": \"^15.3.1\", \"nodemon\": \"^2.0.7\", \"ts-node\": \"^9.1.1\", \"typescript\": \"^4.2.4\" }, \"author\": \"\", \"license\": \"ISC\" } nodemon.json { \"verbose\":true, \"watch\": [\"server.ts\"], \"ext\": \"ts,json\", \"ignore\": [\"node_modules\"], \"exec\": \"node --loader ts-node/esm server.ts\" } npx tsc -init to get initial tsconfig.json tsconfig.json { \"compilerOptions\": { /* Visit https://aka.ms/tsconfig.json to read more about this file */ /* Basic Options */ \"incremental\": true, /* Enable incremental compilation */ \"target\": \"es6\", /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */ \"module\": \"es2020\", /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */ \"strict\": true, /* Enable all strict type-checking options. */ \"esModuleInterop\": true, /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */ \"skipLibCheck\": true, /* Skip type checking of declaration files. */ \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */ } } server.ts import express from 'express'; const port = 3080 const app = express(); app.get('/', (req, res) => { res.send('Well done!'); }) app.listen(port, () => { console.log('The application is listening on port '+port); }) app \u00b6 The npm module react offer a program create-react-app that is meant to called from outside the target directory app . If react is not installed globally, it is a chicken and egg problem. It is solved here by temporarily installing react in the parent dir rets , calling create-react-app , then deleteing top 's node_modules and package.json in rets. The react app can serve itself. However, we do it via express. In order for that to work, a line must be added to the template package.json : \"proxy\": \"http://localhost:3080\", Ran npm run eject and the resulting environment is too complex. Changing to app2 app2 \u00b6 package.json { \"name\": \"app2\", \"version\": \"1.0.0\", \"main\": \"src/index.ts\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"serve\": \"webpack serve --config ./webpack.config.dev.js --progress\", \"build\": \"webpack --config ./webpack.config.prod.js\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"description\": \"\", \"devDependencies\": { \"@types/lodash\": \"^4.14.170\", \"ts-loader\": \"^9.2.1\", \"typescript\": \"^4.2.4\", \"webpack\": \"^5.37.1\", \"webpack-cli\": \"^4.7.0\", \"webpack-dev-server\": \"^3.11.2\" }, \"dependencies\": { \"lodash\": \"^4.17.21\" } } tsconfig.json { \"compilerOptions\": { \"outDir\": \"./dist/\", \"sourceMap\": true, \"noImplicitAny\": true, \"module\": \"es6\", \"target\": \"es5\", \"jsx\": \"react\", \"allowJs\": true, \"moduleResolution\": \"node\", } } webpack.config.dev.js const path = require('path'); const dist_dir = 'dist-dev' module.exports = { mode: 'development', entry: './src/index.ts', devServer: { contentBase: path.join(__dirname, 'dist-dev'), watchContentBase: true, proxy: { '/api': 'http://localhost:3080', }, }, devtool: 'inline-source-map', module: { rules: [ { test: /\\.tsx?$/, use: 'ts-loader', exclude: /node_modules/, }, ], }, resolve: { extensions: ['.tsx', '.ts', '.js'], }, output: { filename: 'bundle.js', path: path.resolve(__dirname, dist_dir), }, }; webpack.config.dev.js NOT YET TESTED src/index.ts import * as _ from 'lodash'; function component(s:string) { const element = document.createElement('div'); element.innerHTML = s; //_.join(['Hello', 'foopack'], ' '); return element; } async function main(){ document.body.appendChild(component(_.join(['Hello', 'foopack'],' '))); const data = await fetch('/api') .then(response => response.text()) //.then(data => console.log(data)); console.log(data) document.body.appendChild(component(data)); } main() dest-dev/index.html (hard coded for now) <html> <head> <meta charset=\"utf-8\" /> </head> <body> <script type=\"text/javascript\" charset=\"utf-8\" src=\"/bundle.js\" ></script> <div>1</div> <div>2</div> <div>3</div> </body> </html>","title":"Express webpack typescript"},{"location":"express-webpack-typescript/#express-and-webpack-with-typescript","text":"","title":"Express and Webpack with Typescript"},{"location":"express-webpack-typescript/#directory","text":"--rets |--api |--app","title":"Directory"},{"location":"express-webpack-typescript/#api","text":"package.json { \"name\": \"api\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"server.js\", \"type\": \"module\", \"scripts\": { \"dev\": \"nodemon\" }, \"dependencies\": { \"express\": \"^4.17.1\", \"http-proxy-middleware\": \"^1.0.4\" }, \"devDependencies\": { \"@types/express\": \"^4.17.11\", \"@types/node\": \"^15.3.1\", \"nodemon\": \"^2.0.7\", \"ts-node\": \"^9.1.1\", \"typescript\": \"^4.2.4\" }, \"author\": \"\", \"license\": \"ISC\" } nodemon.json { \"verbose\":true, \"watch\": [\"server.ts\"], \"ext\": \"ts,json\", \"ignore\": [\"node_modules\"], \"exec\": \"node --loader ts-node/esm server.ts\" } npx tsc -init to get initial tsconfig.json tsconfig.json { \"compilerOptions\": { /* Visit https://aka.ms/tsconfig.json to read more about this file */ /* Basic Options */ \"incremental\": true, /* Enable incremental compilation */ \"target\": \"es6\", /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */ \"module\": \"es2020\", /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */ \"strict\": true, /* Enable all strict type-checking options. */ \"esModuleInterop\": true, /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */ \"skipLibCheck\": true, /* Skip type checking of declaration files. */ \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */ } } server.ts import express from 'express'; const port = 3080 const app = express(); app.get('/', (req, res) => { res.send('Well done!'); }) app.listen(port, () => { console.log('The application is listening on port '+port); })","title":"api"},{"location":"express-webpack-typescript/#app","text":"The npm module react offer a program create-react-app that is meant to called from outside the target directory app . If react is not installed globally, it is a chicken and egg problem. It is solved here by temporarily installing react in the parent dir rets , calling create-react-app , then deleteing top 's node_modules and package.json in rets. The react app can serve itself. However, we do it via express. In order for that to work, a line must be added to the template package.json : \"proxy\": \"http://localhost:3080\", Ran npm run eject and the resulting environment is too complex. Changing to app2","title":"app"},{"location":"express-webpack-typescript/#app2","text":"package.json { \"name\": \"app2\", \"version\": \"1.0.0\", \"main\": \"src/index.ts\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"serve\": \"webpack serve --config ./webpack.config.dev.js --progress\", \"build\": \"webpack --config ./webpack.config.prod.js\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"description\": \"\", \"devDependencies\": { \"@types/lodash\": \"^4.14.170\", \"ts-loader\": \"^9.2.1\", \"typescript\": \"^4.2.4\", \"webpack\": \"^5.37.1\", \"webpack-cli\": \"^4.7.0\", \"webpack-dev-server\": \"^3.11.2\" }, \"dependencies\": { \"lodash\": \"^4.17.21\" } } tsconfig.json { \"compilerOptions\": { \"outDir\": \"./dist/\", \"sourceMap\": true, \"noImplicitAny\": true, \"module\": \"es6\", \"target\": \"es5\", \"jsx\": \"react\", \"allowJs\": true, \"moduleResolution\": \"node\", } } webpack.config.dev.js const path = require('path'); const dist_dir = 'dist-dev' module.exports = { mode: 'development', entry: './src/index.ts', devServer: { contentBase: path.join(__dirname, 'dist-dev'), watchContentBase: true, proxy: { '/api': 'http://localhost:3080', }, }, devtool: 'inline-source-map', module: { rules: [ { test: /\\.tsx?$/, use: 'ts-loader', exclude: /node_modules/, }, ], }, resolve: { extensions: ['.tsx', '.ts', '.js'], }, output: { filename: 'bundle.js', path: path.resolve(__dirname, dist_dir), }, }; webpack.config.dev.js NOT YET TESTED src/index.ts import * as _ from 'lodash'; function component(s:string) { const element = document.createElement('div'); element.innerHTML = s; //_.join(['Hello', 'foopack'], ' '); return element; } async function main(){ document.body.appendChild(component(_.join(['Hello', 'foopack'],' '))); const data = await fetch('/api') .then(response => response.text()) //.then(data => console.log(data)); console.log(data) document.body.appendChild(component(data)); } main() dest-dev/index.html (hard coded for now) <html> <head> <meta charset=\"utf-8\" /> </head> <body> <script type=\"text/javascript\" charset=\"utf-8\" src=\"/bundle.js\" ></script> <div>1</div> <div>2</div> <div>3</div> </body> </html>","title":"app2"},{"location":"mocha-webapck-on-browser/","text":"Running Mocha Tests with Webpack in a Browser \u00b6 June, 2021, craigphicks Intro \u00b6 This document describes simple setup for running mocha tests in the browser, using webpack to bundle. The complete final settings, with both production and development modes integrated, are described in the last section of this document . There is a corresponding repo on github . The intermediate sections of this document show step by step development of the settings adding one feature at a time. The intermediate sections only use webpack production mode. For webpack production mode, a minimal Express server is used to serve the HTML. Only the in last section is webpack development mode introduced. Webpack development mode uses an integrated Webpack server - so the Express is not used in that case. Section Directory Structure and setting files describes the directory structure and setting files used for all cases. Section Using a Single Test File describes settings required for a single self contained mocha test file. Webpack is not required here. Section Multiple Interdependent Test Files describes settings required when using multiple test files which are interdependent, e.g.. one includes another using import. For this case, webpack is required. Section Node dependency, tree shaking vs tree pruning describes settings required when a node library, in this example lodash , is imported, but we only want the bundle to include the part(s) of the library we use. In section Adding Development mode - hot module update and webpack server we enable webpack development mode for the first time. The express server wont be used in development mode because webpack has it's own integrated server for development mode, and that enables hot swapping - which enable auto re-building on source change, so the results are viewable very quickly in the browser. Directory Structure and Setting Files \u00b6 top |-api |-server.ts |-app |-resources // permanent files to be copied |-favicon.ico |-index.html |-test-in-js // tsc produced js files |-index.js |-(test.js) |-test-in-ts // test source files |-index.ts |-(test.ts) // when multiple test files are used |-package.json |-tsconfig.json |-webpack.mocha.js |-static // distributed files for serving |-favicon.ico |-index.html |-index.js // webpack output bundle file The typescript transpiler tsc transpiles the .ts source file(s) in top/app/test-in-ts to create the same root name .js file(s) in top/app/test-in-js . The webpack program bundles the .js files in top/app/test-in-js , as well as any node dependencies if they exist, into the single bundle file top/static/index.js . The files in top/static/index.js will be served by either the Express server (in production mode), or the webpack integrated server (in development mode). Note: Webpack has associated auxilliary software to go directly from .ts files to the bundled package, but this document chooses a more basic approach - aiming for transparency. Using a Single Test File \u00b6 Express server \u00b6 api/server.ts mport express from 'express'; const port = 3080 const app = express(); app.use('/',express.static('../static')) app.listen(port, '127.0.0.1', () => { console.log(`http://localhost:${port}`); }) The code is available in the repository in the api directory. To run change dir to top/api and execute .../api% npm run serve or .../api% ts-node server.ts Assuming the expected files are available in top/static , it will show you the server URL http://localhost:3080 which you can load in a browser. Application-Test side \u00b6 app/resource/index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\" /> <title>Mocha Tests</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /> <link rel=\"stylesheet\" href=\"https://unpkg.com/mocha/mocha.css\" /> </head> <body> <div id=\"mocha\"></div> <script src=\"https://unpkg.com/mocha/mocha.js\"></script> <script class=\"mocha-init\"> mocha.setup({ui:'bdd',bail:true}); mocha.checkLeaks(); </script> <script type='module' src=\"index.js\"></script> <script class=\"mocha-exec\"> mocha.run(); </script> </body> </html> This file follows very closely to the one suggested in this mocha documentation . The only change is adding the mocha.setup parameter bail:true . This tells mocha to quit on the first error. app/test-in-ts/index.ts export function test(){ describe('test', () => { it('1/3 passes ', () => { if (false) throw new Error('fail'); }); it('2/3 fails', () => { if (true) throw new Error('fail'); }); it('3/3 passes', () => { if (false) throw new Error('fail'); }); }); } test() Because the mocha bail:true parameter is set, test 3/3 will never be reached. package.json { \"name\": \"app2\", \"version\": \"1.0.0\", \"main\": \"src/index.ts\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"copy-resources\": \"mkdir -p ../static && cp ./resources/* ../static\", \"build\": \"npm run copy-resources && tsc && cp ./test-in-js/index.js ../static\", \"clean\": \"rm -rf ../static && rm -rf test-in-js\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"description\": \"\", \"devDependencies\": { \"@types/lodash\": \"^4.14.170\", \"@types/mocha\": \"^8.2.2\", \"ts-loader\": \"^9.2.1\", \"typescript\": \"^4.2.4\", \"webpack\": \"^5.37.1\", \"webpack-cli\": \"^4.7.0\", \"webpack-dev-server\": \"^3.11.2\", \"webpack-node-externals\": \"^3.0.0\" }, \"dependencies\": { \"mocha\": \"^8.4.0\", \"lodash\": \"^4.17.21\" } } Note the build script in package.json . The typescript transpiler tsc is called, and the single file of output index.js is copied directly to static . Webpack can be skipped because there is only file index.js and it is suitable recent browsers which can handle es-modules. The script must be run from the top/app directory: .../app % npm run build tsconfig.json { \"compilerOptions\": { \"outDir\": \"./test-in-js/\", \"sourceMap\": true, \"noImplicitAny\": true, \"module\": \"es6\", \"target\": \"es5\", \"allowJs\": true, \"moduleResolution\": \"node\", \"allowSyntheticDefaultImports\":true }, \"include\":[ \"test-in-ts/**/*\" ] } Multiple Interdependent Test Files \u00b6 When multiple test files, where at least one imports another, are used, they must be bundled into one file using a bundler such as Webpack. webpack.mocha.js const path = require('path') module.exports = { mode: \"production\", entry: [\"./test-in-js\"], output:{ filename:'index.js', path: path.resolve(__dirname, '../static'), } }; index.ts import {test} from './test' let b = true; b = false; if (b) test(true); else test(false) test.js function throwIfNot(b:boolean){if (!b) throw new Error('fail');} export function test(b:boolean){ describe('test', () => { it('1/3 passes ', () => { throwIfNot(true) }); it('2/3 ???', () => { throwIfNot(b) }); it('3/3 passes', () => { throwIfNot(true) }); }); } The file index.ts imports test.ts . With that condition we cannot simply load multiple files each with their own script tags. package.json { \"name\": \"app2\", \"version\": \"1.0.0\", \"main\": \"src/index.ts\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"copy-resources\": \"mkdir -p ../static && cp ./resources/* ../static\", \"build\": \"npm run copy-resources && tsc && webpack --config ./webpack.mocha.js\", \"clean\": \"rm -rf ../static && rm -rf test-in-js\" }, \"keywords\": [], \"author\": \"craigphicks\", \"license\": \"ISC\", \"description\": \"\", \"devDependencies\": { \"@types/lodash\": \"^4.14.170\", \"@types/mocha\": \"^8.2.2\", \"mocha\": \"^8.4.0\", \"ts-loader\": \"^9.2.1\", \"typescript\": \"^4.2.4\", \"webpack\": \"^5.37.1\", \"webpack-cli\": \"^4.7.0\", \"webpack-dev-server\": \"^3.11.2\", \"webpack-node-externals\": \"^3.0.0\" }, \"dependencies\": { \"lodash\": \"^4.17.21\" } } Node dependency, tree shaking vs tree pruning \u00b6 test.js import * as _ from 'lodash'; function throwIfNot(b:boolean){if (!b) throw new Error('fail ');} export function test(b:boolean){ describe('test', () => { it('1/4 passes ', () => { throwIfNot(true) }); it('2/4 passes', () => { const s = _.join(['1','2'],'') throwIfNot(s==='12') }); it('3/3 ???', () => { throwIfNot(b) }); it('3/4 passes', () => { throwIfNot(true) }); }); } The output is big - 77k, because the whole lodash lib is included in the bundle, even though only join is used. $ ls -al ../static/index.js -rw-rw-r-- 1 craig craig 71105 Jun 1 15:47 ../static/index.js Tree pruning (manual) to reduce size \u00b6 In test.js change import * as _ from 'lodash' to import join from 'lodash/join , and _.join(...) to join(...) . $ ls -al ../static/index.js -rw-rw-r-- 1 craig craig 772 Jun 1 16:49 ../static/index.js This manualy pruning limits the bundle size. However, in the case of lodash we won't do that, because tree shaking is possible. Tree shaking (automatic) to reduce size \u00b6 Webpack has the ability to tree-shake, but it only works with es-modules, so libraries (such as lodash ) not written as es-modules fail tree shaking. Fortunately there is an lodash-es version of lodash , written in ES6 format. We replace lodash with lodash-es npm i lodash-es && npm i -D @types/lodash-es npm uninstall lodash @types/lodash and change the import line in test.ts from import * as _ from 'lodash' to import * as _ from 'lodash-es' Then build npm run build and check the size .../app$ ls -al ../static/index.js -rw-rw-r-- 1 craig craig 351 Jun 2 07:47 ../static/index.js The size is small, tree-shaking is working. Adding Development mode - hot module update and webpack server \u00b6 Hot module update enables the browser content to be updated automatically as a result of changing any source file, including any typescript test file. Webpack offers it own built in HTML server for this, so we won't be using express. The webpack.mocha.config and package.json files are modifed to handle both modes - production and development. webpack.mocha.config const path = require('path'); const DIST = path.resolve(__dirname, '../static'); module.exports = (env) => { console.log(`env=${JSON.stringify(env, null, 2)}`); const isdev = env.dev; let ret = { mode: isdev ? 'development' : 'production', entry: ['./test-in-js'], output: { filename: 'index.js', path: DIST, }, }; if (isdev) { ret = { ...ret, watch: true, devServer: { contentBase: DIST, watchContentBase: true, // proxy: { // '/api': 'http://localhost:3080', // }, }, devtool: 'inline-source-map', }; } console.log('config='+JSON.stringify(ret,null,2)) return ret }; package.json \"name\": \"app2\", \"version\": \"1.0.0\", \"main\": \"src/index.ts\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"copy-resources\": \"mkdir -p ../static && cp ./resources/* ../static\", \"build\": \"npm run copy-resources && tsc && webpack --config ./webpack.mocha.js\", \"build-dev\": \"npm run copy-resources && tsc && ( tsc -w & ) && webpack serve --env dev --config ./webpack.mocha.js --progress\", \"clean\": \"rm -rf ../static && rm -rf test-in-js\" }, \"keywords\": [], \"author\": \"craigphicks\", \"license\": \"ISC\", \"description\": \"\", \"devDependencies\": { \"@types/lodash-es\": \"^4.17.4\", \"@types/mocha\": \"^8.2.2\", \"mocha\": \"^8.4.0\", \"ts-loader\": \"^9.2.1\", \"typescript\": \"^4.2.4\", \"webpack\": \"^5.37.1\", \"webpack-cli\": \"^4.7.0\", \"webpack-dev-server\": \"^3.11.2\", \"webpack-node-externals\": \"^3.0.0\" }, \"dependencies\": { \"lodash-es\": \"^4.17.21\" } } Notice in the script build-dev we see ... && tsc && ( tsc -w & ) && ... . This is executing tsc once to completion, then running it again in watch mode in the background, so that any changes are immediately retranspiled into new .js files. webpack serve ... ensures those .js files are being watched to build a new bundle ../static/index.js when the .js files change. Note: webpack has software to allow going directly from .ts files to bundle, but this document takes a more basic approach for the sake of transparency. Run in production mode \u00b6 Build the page to serve \u00b6 In one window change to top/app .../app% npm run build Open the server \u00b6 In another window change dir to top/api .../api% npm run serve or .../api% ts-node server.ts It will show you the server URL http://localhost:3080 which you can load in a browser. Run in development mode \u00b6 Change to top/app .../app% npm run build-dev It will show you the server URL http://localhost:3080 which you can load in a browser.","title":"Mocha webapck on browser"},{"location":"mocha-webapck-on-browser/#running-mocha-tests-with-webpack-in-a-browser","text":"June, 2021, craigphicks","title":"Running Mocha Tests with Webpack in a Browser"},{"location":"mocha-webapck-on-browser/#intro","text":"This document describes simple setup for running mocha tests in the browser, using webpack to bundle. The complete final settings, with both production and development modes integrated, are described in the last section of this document . There is a corresponding repo on github . The intermediate sections of this document show step by step development of the settings adding one feature at a time. The intermediate sections only use webpack production mode. For webpack production mode, a minimal Express server is used to serve the HTML. Only the in last section is webpack development mode introduced. Webpack development mode uses an integrated Webpack server - so the Express is not used in that case. Section Directory Structure and setting files describes the directory structure and setting files used for all cases. Section Using a Single Test File describes settings required for a single self contained mocha test file. Webpack is not required here. Section Multiple Interdependent Test Files describes settings required when using multiple test files which are interdependent, e.g.. one includes another using import. For this case, webpack is required. Section Node dependency, tree shaking vs tree pruning describes settings required when a node library, in this example lodash , is imported, but we only want the bundle to include the part(s) of the library we use. In section Adding Development mode - hot module update and webpack server we enable webpack development mode for the first time. The express server wont be used in development mode because webpack has it's own integrated server for development mode, and that enables hot swapping - which enable auto re-building on source change, so the results are viewable very quickly in the browser.","title":"Intro"},{"location":"mocha-webapck-on-browser/#directory-structure-and-setting-files","text":"top |-api |-server.ts |-app |-resources // permanent files to be copied |-favicon.ico |-index.html |-test-in-js // tsc produced js files |-index.js |-(test.js) |-test-in-ts // test source files |-index.ts |-(test.ts) // when multiple test files are used |-package.json |-tsconfig.json |-webpack.mocha.js |-static // distributed files for serving |-favicon.ico |-index.html |-index.js // webpack output bundle file The typescript transpiler tsc transpiles the .ts source file(s) in top/app/test-in-ts to create the same root name .js file(s) in top/app/test-in-js . The webpack program bundles the .js files in top/app/test-in-js , as well as any node dependencies if they exist, into the single bundle file top/static/index.js . The files in top/static/index.js will be served by either the Express server (in production mode), or the webpack integrated server (in development mode). Note: Webpack has associated auxilliary software to go directly from .ts files to the bundled package, but this document chooses a more basic approach - aiming for transparency.","title":"Directory Structure and Setting Files"},{"location":"mocha-webapck-on-browser/#using-a-single-test-file","text":"","title":" Using a Single Test File"},{"location":"mocha-webapck-on-browser/#express-server","text":"api/server.ts mport express from 'express'; const port = 3080 const app = express(); app.use('/',express.static('../static')) app.listen(port, '127.0.0.1', () => { console.log(`http://localhost:${port}`); }) The code is available in the repository in the api directory. To run change dir to top/api and execute .../api% npm run serve or .../api% ts-node server.ts Assuming the expected files are available in top/static , it will show you the server URL http://localhost:3080 which you can load in a browser.","title":"Express server"},{"location":"mocha-webapck-on-browser/#application-test-side","text":"app/resource/index.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\" /> <title>Mocha Tests</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /> <link rel=\"stylesheet\" href=\"https://unpkg.com/mocha/mocha.css\" /> </head> <body> <div id=\"mocha\"></div> <script src=\"https://unpkg.com/mocha/mocha.js\"></script> <script class=\"mocha-init\"> mocha.setup({ui:'bdd',bail:true}); mocha.checkLeaks(); </script> <script type='module' src=\"index.js\"></script> <script class=\"mocha-exec\"> mocha.run(); </script> </body> </html> This file follows very closely to the one suggested in this mocha documentation . The only change is adding the mocha.setup parameter bail:true . This tells mocha to quit on the first error. app/test-in-ts/index.ts export function test(){ describe('test', () => { it('1/3 passes ', () => { if (false) throw new Error('fail'); }); it('2/3 fails', () => { if (true) throw new Error('fail'); }); it('3/3 passes', () => { if (false) throw new Error('fail'); }); }); } test() Because the mocha bail:true parameter is set, test 3/3 will never be reached. package.json { \"name\": \"app2\", \"version\": \"1.0.0\", \"main\": \"src/index.ts\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"copy-resources\": \"mkdir -p ../static && cp ./resources/* ../static\", \"build\": \"npm run copy-resources && tsc && cp ./test-in-js/index.js ../static\", \"clean\": \"rm -rf ../static && rm -rf test-in-js\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"description\": \"\", \"devDependencies\": { \"@types/lodash\": \"^4.14.170\", \"@types/mocha\": \"^8.2.2\", \"ts-loader\": \"^9.2.1\", \"typescript\": \"^4.2.4\", \"webpack\": \"^5.37.1\", \"webpack-cli\": \"^4.7.0\", \"webpack-dev-server\": \"^3.11.2\", \"webpack-node-externals\": \"^3.0.0\" }, \"dependencies\": { \"mocha\": \"^8.4.0\", \"lodash\": \"^4.17.21\" } } Note the build script in package.json . The typescript transpiler tsc is called, and the single file of output index.js is copied directly to static . Webpack can be skipped because there is only file index.js and it is suitable recent browsers which can handle es-modules. The script must be run from the top/app directory: .../app % npm run build tsconfig.json { \"compilerOptions\": { \"outDir\": \"./test-in-js/\", \"sourceMap\": true, \"noImplicitAny\": true, \"module\": \"es6\", \"target\": \"es5\", \"allowJs\": true, \"moduleResolution\": \"node\", \"allowSyntheticDefaultImports\":true }, \"include\":[ \"test-in-ts/**/*\" ] }","title":"Application-Test side"},{"location":"mocha-webapck-on-browser/#multiple-interdependent-test-files","text":"When multiple test files, where at least one imports another, are used, they must be bundled into one file using a bundler such as Webpack. webpack.mocha.js const path = require('path') module.exports = { mode: \"production\", entry: [\"./test-in-js\"], output:{ filename:'index.js', path: path.resolve(__dirname, '../static'), } }; index.ts import {test} from './test' let b = true; b = false; if (b) test(true); else test(false) test.js function throwIfNot(b:boolean){if (!b) throw new Error('fail');} export function test(b:boolean){ describe('test', () => { it('1/3 passes ', () => { throwIfNot(true) }); it('2/3 ???', () => { throwIfNot(b) }); it('3/3 passes', () => { throwIfNot(true) }); }); } The file index.ts imports test.ts . With that condition we cannot simply load multiple files each with their own script tags. package.json { \"name\": \"app2\", \"version\": \"1.0.0\", \"main\": \"src/index.ts\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"copy-resources\": \"mkdir -p ../static && cp ./resources/* ../static\", \"build\": \"npm run copy-resources && tsc && webpack --config ./webpack.mocha.js\", \"clean\": \"rm -rf ../static && rm -rf test-in-js\" }, \"keywords\": [], \"author\": \"craigphicks\", \"license\": \"ISC\", \"description\": \"\", \"devDependencies\": { \"@types/lodash\": \"^4.14.170\", \"@types/mocha\": \"^8.2.2\", \"mocha\": \"^8.4.0\", \"ts-loader\": \"^9.2.1\", \"typescript\": \"^4.2.4\", \"webpack\": \"^5.37.1\", \"webpack-cli\": \"^4.7.0\", \"webpack-dev-server\": \"^3.11.2\", \"webpack-node-externals\": \"^3.0.0\" }, \"dependencies\": { \"lodash\": \"^4.17.21\" } }","title":"Multiple Interdependent Test Files"},{"location":"mocha-webapck-on-browser/#node-dependency-tree-shaking-vs-tree-pruning","text":"test.js import * as _ from 'lodash'; function throwIfNot(b:boolean){if (!b) throw new Error('fail ');} export function test(b:boolean){ describe('test', () => { it('1/4 passes ', () => { throwIfNot(true) }); it('2/4 passes', () => { const s = _.join(['1','2'],'') throwIfNot(s==='12') }); it('3/3 ???', () => { throwIfNot(b) }); it('3/4 passes', () => { throwIfNot(true) }); }); } The output is big - 77k, because the whole lodash lib is included in the bundle, even though only join is used. $ ls -al ../static/index.js -rw-rw-r-- 1 craig craig 71105 Jun 1 15:47 ../static/index.js","title":" Node dependency, tree shaking vs tree pruning"},{"location":"mocha-webapck-on-browser/#tree-pruning-manual-to-reduce-size","text":"In test.js change import * as _ from 'lodash' to import join from 'lodash/join , and _.join(...) to join(...) . $ ls -al ../static/index.js -rw-rw-r-- 1 craig craig 772 Jun 1 16:49 ../static/index.js This manualy pruning limits the bundle size. However, in the case of lodash we won't do that, because tree shaking is possible.","title":"Tree pruning (manual) to reduce size"},{"location":"mocha-webapck-on-browser/#tree-shaking-automatic-to-reduce-size","text":"Webpack has the ability to tree-shake, but it only works with es-modules, so libraries (such as lodash ) not written as es-modules fail tree shaking. Fortunately there is an lodash-es version of lodash , written in ES6 format. We replace lodash with lodash-es npm i lodash-es && npm i -D @types/lodash-es npm uninstall lodash @types/lodash and change the import line in test.ts from import * as _ from 'lodash' to import * as _ from 'lodash-es' Then build npm run build and check the size .../app$ ls -al ../static/index.js -rw-rw-r-- 1 craig craig 351 Jun 2 07:47 ../static/index.js The size is small, tree-shaking is working.","title":"Tree shaking (automatic) to reduce size"},{"location":"mocha-webapck-on-browser/#adding-development-mode-hot-module-update-and-webpack-server","text":"Hot module update enables the browser content to be updated automatically as a result of changing any source file, including any typescript test file. Webpack offers it own built in HTML server for this, so we won't be using express. The webpack.mocha.config and package.json files are modifed to handle both modes - production and development. webpack.mocha.config const path = require('path'); const DIST = path.resolve(__dirname, '../static'); module.exports = (env) => { console.log(`env=${JSON.stringify(env, null, 2)}`); const isdev = env.dev; let ret = { mode: isdev ? 'development' : 'production', entry: ['./test-in-js'], output: { filename: 'index.js', path: DIST, }, }; if (isdev) { ret = { ...ret, watch: true, devServer: { contentBase: DIST, watchContentBase: true, // proxy: { // '/api': 'http://localhost:3080', // }, }, devtool: 'inline-source-map', }; } console.log('config='+JSON.stringify(ret,null,2)) return ret }; package.json \"name\": \"app2\", \"version\": \"1.0.0\", \"main\": \"src/index.ts\", \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\", \"copy-resources\": \"mkdir -p ../static && cp ./resources/* ../static\", \"build\": \"npm run copy-resources && tsc && webpack --config ./webpack.mocha.js\", \"build-dev\": \"npm run copy-resources && tsc && ( tsc -w & ) && webpack serve --env dev --config ./webpack.mocha.js --progress\", \"clean\": \"rm -rf ../static && rm -rf test-in-js\" }, \"keywords\": [], \"author\": \"craigphicks\", \"license\": \"ISC\", \"description\": \"\", \"devDependencies\": { \"@types/lodash-es\": \"^4.17.4\", \"@types/mocha\": \"^8.2.2\", \"mocha\": \"^8.4.0\", \"ts-loader\": \"^9.2.1\", \"typescript\": \"^4.2.4\", \"webpack\": \"^5.37.1\", \"webpack-cli\": \"^4.7.0\", \"webpack-dev-server\": \"^3.11.2\", \"webpack-node-externals\": \"^3.0.0\" }, \"dependencies\": { \"lodash-es\": \"^4.17.21\" } } Notice in the script build-dev we see ... && tsc && ( tsc -w & ) && ... . This is executing tsc once to completion, then running it again in watch mode in the background, so that any changes are immediately retranspiled into new .js files. webpack serve ... ensures those .js files are being watched to build a new bundle ../static/index.js when the .js files change. Note: webpack has software to allow going directly from .ts files to bundle, but this document takes a more basic approach for the sake of transparency.","title":"Adding Development mode - hot module update and webpack server"},{"location":"mocha-webapck-on-browser/#run-in-production-mode","text":"","title":"Run in production mode"},{"location":"mocha-webapck-on-browser/#build-the-page-to-serve","text":"In one window change to top/app .../app% npm run build","title":"Build the page to serve"},{"location":"mocha-webapck-on-browser/#open-the-server","text":"In another window change dir to top/api .../api% npm run serve or .../api% ts-node server.ts It will show you the server URL http://localhost:3080 which you can load in a browser.","title":"Open the server"},{"location":"mocha-webapck-on-browser/#run-in-development-mode","text":"Change to top/app .../app% npm run build-dev It will show you the server URL http://localhost:3080 which you can load in a browser.","title":"Run in development mode"},{"location":"set-mkdocs-material/","text":"Setting up mkdocs-material with latest github version \u00b6 Find the tag of the latest version on github.com/squidfunk/mkdocs-material , e.g., 7.1.5 , and make a shallow clone (arbitrarily under a directory ~/github in this example). % git clone --branch 7.1.5 --depth 1 https://github.com/squidfunk/mkdocs-material.git Enter that directory % cd ~/github/mkdocs-material Setup local environment directory (abitrarily named .venv here). % python3 -m venv .venv Activate it % source .venv/bin/activate and the prompt will change (.venv)% Use pip to install the necessary python modules (.venv)% pip3 install -r requirements.txt You'll probably get some error messages but do it again and it will tell everything is OK. Build it (.venv)% python3 setup.py build Decide what root to install under. Arbitrarily, this example uses /mnt/common . Add to your ~/.bashrc the following - export PYTHONPATH=/mnt/common/lib/python3.8/site-packages:$PYTHONPATH export PATH=/mnt/common/bin:$PATH (Note: Modifiying .bashrc should not be necessary if the root is / ) Then of course (.venv)% source ~/.bashrc Then execute install. (.venv)% python3 setup.py install --prefix /mnt/common If an error occurs repeat the same command and it should work the second time. Close the terminal to exit the (.venv) python environment. The directory ~/github/mkdocs-material is no loger required. rm -Rf ~/github/mkdocs-material Suppose you have a mkdocs-material site in the directory ~/github/mysite . Then % cd ~/github/mysite % mkdocs serve should work correctly.","title":"Setting up mkdocs-material with latest github version"},{"location":"set-mkdocs-material/#setting-up-mkdocs-material-with-latest-github-version","text":"Find the tag of the latest version on github.com/squidfunk/mkdocs-material , e.g., 7.1.5 , and make a shallow clone (arbitrarily under a directory ~/github in this example). % git clone --branch 7.1.5 --depth 1 https://github.com/squidfunk/mkdocs-material.git Enter that directory % cd ~/github/mkdocs-material Setup local environment directory (abitrarily named .venv here). % python3 -m venv .venv Activate it % source .venv/bin/activate and the prompt will change (.venv)% Use pip to install the necessary python modules (.venv)% pip3 install -r requirements.txt You'll probably get some error messages but do it again and it will tell everything is OK. Build it (.venv)% python3 setup.py build Decide what root to install under. Arbitrarily, this example uses /mnt/common . Add to your ~/.bashrc the following - export PYTHONPATH=/mnt/common/lib/python3.8/site-packages:$PYTHONPATH export PATH=/mnt/common/bin:$PATH (Note: Modifiying .bashrc should not be necessary if the root is / ) Then of course (.venv)% source ~/.bashrc Then execute install. (.venv)% python3 setup.py install --prefix /mnt/common If an error occurs repeat the same command and it should work the second time. Close the terminal to exit the (.venv) python environment. The directory ~/github/mkdocs-material is no loger required. rm -Rf ~/github/mkdocs-material Suppose you have a mkdocs-material site in the directory ~/github/mysite . Then % cd ~/github/mysite % mkdocs serve should work correctly.","title":"Setting up mkdocs-material with latest github version"},{"location":"ubiquiti/","text":"Setting up Ubiquiti Wifi (UAP-AC-Lite) on Linux Ubuntu 16.04 \u00b6 Summary \u00b6 installing the Unifi controller on Ubuntu 16.04. It will be used to control the Ubiquiti wifi model: UAP-AC-LITE Caution : Post Setup note on possible insecurity \u00b6 NOTE: After logging out of unifi at the browser level, I later found a nest of unifi processes still running, and blocking other processes from using port 8080. I also found this post claiming unifi setup on linux is very insecure. Indeed, some of hte unifi processes are running as root . Show unifi processes ps -aux | grep unifi root 28116 0.0 0.0 17072 12 ? Ss Jun10 0:00 unifi -cwd /usr/lib/unifi -home /us root 28117 0.0 0.0 17072 20 ? S Jun10 0:00 unifi -cwd /usr/lib/unifi -home /us unifi 28119 0.0 0.6 3343864 53068 ? Sl Jun10 1:12 unifi -cwd /usr/lib/unifi -home /us unifi 28135 0.1 5.7 4442860 461816 ? Sl Jun10 3:16 /usr/lib/jvm/java-8-openjdk-amd64/j unifi 28968 0.1 0.9 1045124 78456 ? Sl Jun10 5:08 /usr/bin/mongod --dbpath /usr/lib/u Report the status of the systemd unifi service sudo systemctl status unifi \u25cf unifi.service - unifi Loaded: loaded (/lib/systemd/system/unifi.service; enabled; vendor preset: enabled) Active: active (running) since Sun 2018-06-10 19:01:40 PDT; 2 days ago Process: 27877 ExecStop=/usr/lib/unifi/bin/unifi.init stop (code=exited, status=0/SUCCESS) Process: 28057 ExecStart=/usr/lib/unifi/bin/unifi.init start (code=exited, status=0/SUCCESS) Main PID: 28116 (jsvc) Tasks: 910 Memory: 653.6M CPU: 9min 38.339s CGroup: /system.slice/unifi.service \u251c\u250028116 unifi -cwd /usr/lib/unifi -home /usr/lib/jvm/java-8-openjdk-amd64 -cp /usr/share/ \u251c\u250028117 unifi -cwd /usr/lib/unifi -home /usr/lib/jvm/java-8-openjdk-amd64 -cp /usr/share/ \u251c\u250028119 unifi -cwd /usr/lib/unifi -home /usr/lib/jvm/java-8-openjdk-amd64 -cp /usr/share/ \u251c\u250028135 /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java -Xmx1024M -XX:ErrorFile=/usr/lib/u \u2514\u250028968 /usr/bin/mongod --dbpath /usr/lib/unifi/data/db --port 27117 --unixSocketPrefix / Jun 10 19:01:39 user-desktop systemd[1]: Starting unifi... Jun 10 19:01:39 user-desktop unifi.init[28057]: * Starting Ubiquiti UniFi Controller unifi Jun 10 19:01:40 user-desktop unifi.init[28057]: ...done. Jun 10 19:01:40 user-desktop systemd[1]: Started unifi. Stop the unifi service: sudo systemctl stop unifi ps -aux | grep unifi <empty result> So stopping the unifi service has temporarily solved the problem. Of course the unifi browser program will not run, but that doesn't affect the operation of the wifi once it has been set up. Getting to the correct URL \u00b6 The right place to start is UniFi - How to Install & Update via APT on Debian or Ubuntu . FYI, It's three link-hops from from the quick-start guide to that page: - quickstart guide - \"UniFi 5.7.23 Controller for Debian/Ubuntu Linux\" . - Ignore the download button on the right hand side, instead open up the release notes . - See the line with a link \"HERE\": \"For Debian/Ubuntu users, please update your APT source see HERE \". Installation \u00b6 It's best to start by installing/confirming the MongoDB version you want to use, and then install Ubiquiti's unifi software. The reason for that is that unifi will create start running and create a mongo database immediately with whatever MongoDB version is already installed or installs automatically with unifi . Then, when updating the MongoDB in the next step, that database might be incompatible and you might have to remove it. Installing MongoDB \u00b6 We are following MongoBD instructions which succesfully installed version 3.6.5 . Beware! Don't use this page , it is out of date! sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5 echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list sudo apt-get update sudo apt-get install -y mongodb-org Optionally a specific version can pinned, but we skip that: echo \"mongodb-org hold\" | sudo dpkg --set-selections echo \"mongodb-org-server hold\" | sudo dpkg --set-selections echo \"mongodb-org-shell hold\" | sudo dpkg --set-selections echo \"mongodb-org-mongos hold\" | sudo dpkg --set-selections echo \"mongodb-org-tools hold\" | sudo dpkg --set-selections Start the systemd service mongod . Note that is is mongod without a b at the end! Confirm it's status: systemctl start mongod systemctl status mongod \u25cf mongod.service - High-performance, schema-free document-oriented database Loaded: loaded (/lib/systemd/system/mongod.service; disabled; vendor preset: enabled) Active: active (running) since Sun 2018-06-10 10:47:09 PDT; 10s ago Docs: https://docs.mongodb.org/manual Main PID: 27814 (mongod) Tasks: 23 Memory: 38.9M CPU: 636ms CGroup: /system.slice/mongod.service \u2514\u250027814 /usr/bin/mongod --config /etc/mongod.conf There is compatibility problem between mongodb 3.6 and unifi 5.7 . The latter is issues mongo commands that use a flag only found in mongodb 3.4 . It is discussed here . Although it might be possible to use the mongodb setFeatureCompatibilityVersion function , we used a different workaround instead: sudo mv /usr/lib/unifi/bin/mongodb /usr/lib/unifi/bin/mongodb.old cat << _EOF > /usr/lib/unifi/bin/mongodb #!/bin/bash echo \"[ $date ]: ${*}\" >> /usr/lib/unifi/logs/mongod-call-args.log exec /usr/bin/mongod ${*//--nohttpinterface/} _EOF chmod 755 /usr/lib/unifi/bin/mongodb The line echo \"[ $date ]: ${*}\" >> /usr/lib/unifi/logs/mongod-call-args.log writes the arguments passed by unifi to mongod into a log file for veiwing. The line: exec /usr/bin/mongod ${*//--nohttpinterface/} removes the offending mongodb 3.6\" incompatible argument from the arguments passed by *unifi . Installing the Ubiquiti software \u00b6 WARNING - installing the desired *MongoDB version first is recommended.* UniFi - How to Install & Update via APT on Debian or Ubuntu echo 'deb http://www.ubnt.com/downloads/unifi/debian stable ubiquiti' | sudo tee /etc/apt/sources.list.d/100-ubnt-unifi.list sudo wget -O /etc/apt/trusted.gpg.d/unifi-repo.gpg https://dl.ubnt.com/unifi/unifi-repo.gpg sudo apt-get update sudo apt-get install unifi Log files \u00b6 /usr/lib/unifi/logs/server.log /usr/lib/unifi/logs/mongod.log sudo cat /usr/lib/unifi/logs/server.log [2018-06-10 09:32:36,020] <main> WARN system - reload system.properties failed: file not found [2018-06-10 09:32:36,478] <main> WARN system - reload system.properties failed: file not found [2018-06-10 09:32:37,806] <launcher> INFO system - *** Running for the first time, creating identity *** [2018-06-10 09:32:37,808] <launcher> INFO system - UUID: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [2018-06-10 09:32:37,808] <launcher> WARN system - reload system.properties failed: file not found [2018-06-10 09:32:37,810] <launcher> INFO system - ====================================================================== [2018-06-10 09:32:37,810] <launcher> INFO system - UniFi 5.7.23 (build atag_5.7.23_10670 - release) is started [2018-06-10 09:32:37,810] <launcher> INFO system - ====================================================================== [2018-06-10 09:32:37,818] <launcher> INFO system - BASE dir:/usr/lib/unifi [2018-06-10 09:32:37,832] <launcher> INFO system - Current System IP: 172.18.0.1 [2018-06-10 09:32:37,847] <launcher> INFO system - Hostname: user-desktop [2018-06-10 09:32:38,195] <launcher> INFO system - Valid keystore is missing. Generating one ... [2018-06-10 09:32:38,196] <launcher> INFO system - Generating Certificate[UniFi]... please wait... [2018-06-10 09:32:38,930] <launcher> INFO system - Certificate[UniFi] generated! [2018-06-10 09:32:40,224] <launcher> INFO db - waiting for db connection... [2018-06-10 09:32:40,724] <launcher> INFO db - Connecting to mongodb://127.0.0.1:27117 [2018-06-10 09:32:42,645] <launcher> INFO db - Connecting to mongodb://127.0.0.1:27117 .... sudo cat /usr/lib/unifi/logs/monodb.log ... systemctl -a | grep unifi unifi.service loaded active running unifi systemctl -a | grep mongod mongod.service loaded active running High-performance, schema-free document-oriented database \u25cf mongodb.service masked inactive dead mongodb.service Make Wifi unit and Unifi talk to each other \u00b6 find local lan ip addresses of wifi and PC ssh into wifi unit and and tell it the address of the PC to initiate handshake open unifi program in PC browser to return handshake with Wifi unit again ssh into wifi unit for final acknowledge of handshake. find local lan ip addresses of wifi and PC \u00b6 The Wifi unit, just by being plugged in to the LAN, should have started up and the light should be solid blue. It will have received an IP address via DHCP. Find the ipaddresses of - the Linux PC hosting unifi - the Wifi unit. Use ifconfig to see the PC address. Below it follows inet addr: ifconfig enp2s0 Link encap:Ethernet HWaddr xxxxxxxxxxxxxx inet addr:192.168.1.69 Bcast:192.168.1.255 Mask:255.255.255.0 Use nmap to see the Wifi address. nmap -sP will ping all the addresses over a given range, and gather information about the responses. The range is determined by the Mask: result returned by ifconfig above. In this example case, the last first 24 bits of the address are masked. Translating that into CIDR format we get 192.168.1.0/24 , which is passed to nmap . As shown below, the Wifi is identifiable by it's name 'Ubiquiti Networks'. sudo nmap -sP 192.168.1.0/24 ... Nmap scan report for unknownF09FC273B889 (192.168.1.70) Host is up (-0.100s latency). MAC Address: xx:xx:xx:xx:xx:xx (Ubiquiti Networks) ... In the above example we found: PC addr Wifi Addr 192.168.1.68 192.168.1.70 ssh into wifi unit, set PC address \u00b6 ssh into the device as user ubnt with the password shown here . ssh ubnt@192.168.1.70 ubnt@192.168.1.70's password: .... BusyBox v1.19.4 (2016-01-19 22:59:59 PST) built-in shell (ash) Enter 'help' for a list of built-in commands. BZ.v3.4.14# help UniFi Command Line Interface - Ubiquiti Networks info display device information set-default restore to factory default set-inform <inform_url> attempt inform URL (e.g. set-inform http://192.168.0.8:8080/inform) upgrade <firmware_url> upgrade firmware (e.g. upgrade http://192.168.0.8/unifi_fw.bin) reboot reboot the device BZ.v3.4.14# set-inform http://192.168.1.69:8080/inform As can be seen, in addition to the address of the PC, a port must also be specified. Ther default is 8080, but if that port is being used for something else on the PC, another port can be shosen. open unifi program in PC browser to return handshake with Wifi unit \u00b6 ** firewall ** The PC might have a firewall blocking communications from the Wifi address. If ufw is the fireall, then communication from the Wifi can be allowed as follows: sudo ufw allow from 192.168.1.70 View the rule: sudo ufw status numbered Status: active To Action From -- ------ ---- [ 1] Anywhere ALLOW IN 192.168.1.70 NOTE: During normal operation of the Wifi after setup it is not necessary to leave that hole in the firewall open. It can be closed like this: sudo ufw status numbered ... [ 1] Anywhere ALLOW IN 192.168.1.70 sudo ufw delete 1 Deleting: allow from 192.168.1.70 Proceed with operation (y|n)? y Rule deleted Enter in browser address bar: https://localhost:8443 ** untrusted certificate The browser will probably refuse to connect because of an untrusted certificate. Using the advanced options button, enable an exception for that certificate. Then the setup can continue. You should see the unit appear ready to connect. Enter a lot of ID's and passwords: SSID and password : To be used from devices, e.g. smart phones, to connect to the Wifi admin and password : To log into the unifi program device authentication and password : To ssh into the Wifi again ssh into wifi unit and set-inform \u00b6 Login with new id/password given for device authentification , and enter the same set-inform command as before. ssh <device-auth-id>@192.168.1.70 <device-auth-id>@192.168.1.70's password: <device-auth-id password> BusyBox v1.19.4 (2016-01-19 22:59:59 PST) built-in shell (ash) Enter 'help' for a list of built-in commands. BZ.v3.4.14# set-inform http://192.168.1.69:8080/inform End of post","title":"Ubiquiti"},{"location":"ubiquiti/#setting-up-ubiquiti-wifi-uap-ac-lite-on-linux-ubuntu-1604","text":"","title":"Setting up Ubiquiti Wifi (UAP-AC-Lite) on Linux Ubuntu 16.04"},{"location":"ubiquiti/#summary","text":"installing the Unifi controller on Ubuntu 16.04. It will be used to control the Ubiquiti wifi model: UAP-AC-LITE","title":"Summary"},{"location":"ubiquiti/#caution-post-setup-note-on-possible-insecurity","text":"NOTE: After logging out of unifi at the browser level, I later found a nest of unifi processes still running, and blocking other processes from using port 8080. I also found this post claiming unifi setup on linux is very insecure. Indeed, some of hte unifi processes are running as root . Show unifi processes ps -aux | grep unifi root 28116 0.0 0.0 17072 12 ? Ss Jun10 0:00 unifi -cwd /usr/lib/unifi -home /us root 28117 0.0 0.0 17072 20 ? S Jun10 0:00 unifi -cwd /usr/lib/unifi -home /us unifi 28119 0.0 0.6 3343864 53068 ? Sl Jun10 1:12 unifi -cwd /usr/lib/unifi -home /us unifi 28135 0.1 5.7 4442860 461816 ? Sl Jun10 3:16 /usr/lib/jvm/java-8-openjdk-amd64/j unifi 28968 0.1 0.9 1045124 78456 ? Sl Jun10 5:08 /usr/bin/mongod --dbpath /usr/lib/u Report the status of the systemd unifi service sudo systemctl status unifi \u25cf unifi.service - unifi Loaded: loaded (/lib/systemd/system/unifi.service; enabled; vendor preset: enabled) Active: active (running) since Sun 2018-06-10 19:01:40 PDT; 2 days ago Process: 27877 ExecStop=/usr/lib/unifi/bin/unifi.init stop (code=exited, status=0/SUCCESS) Process: 28057 ExecStart=/usr/lib/unifi/bin/unifi.init start (code=exited, status=0/SUCCESS) Main PID: 28116 (jsvc) Tasks: 910 Memory: 653.6M CPU: 9min 38.339s CGroup: /system.slice/unifi.service \u251c\u250028116 unifi -cwd /usr/lib/unifi -home /usr/lib/jvm/java-8-openjdk-amd64 -cp /usr/share/ \u251c\u250028117 unifi -cwd /usr/lib/unifi -home /usr/lib/jvm/java-8-openjdk-amd64 -cp /usr/share/ \u251c\u250028119 unifi -cwd /usr/lib/unifi -home /usr/lib/jvm/java-8-openjdk-amd64 -cp /usr/share/ \u251c\u250028135 /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java -Xmx1024M -XX:ErrorFile=/usr/lib/u \u2514\u250028968 /usr/bin/mongod --dbpath /usr/lib/unifi/data/db --port 27117 --unixSocketPrefix / Jun 10 19:01:39 user-desktop systemd[1]: Starting unifi... Jun 10 19:01:39 user-desktop unifi.init[28057]: * Starting Ubiquiti UniFi Controller unifi Jun 10 19:01:40 user-desktop unifi.init[28057]: ...done. Jun 10 19:01:40 user-desktop systemd[1]: Started unifi. Stop the unifi service: sudo systemctl stop unifi ps -aux | grep unifi <empty result> So stopping the unifi service has temporarily solved the problem. Of course the unifi browser program will not run, but that doesn't affect the operation of the wifi once it has been set up.","title":"Caution: Post Setup note on possible insecurity"},{"location":"ubiquiti/#getting-to-the-correct-url","text":"The right place to start is UniFi - How to Install & Update via APT on Debian or Ubuntu . FYI, It's three link-hops from from the quick-start guide to that page: - quickstart guide - \"UniFi 5.7.23 Controller for Debian/Ubuntu Linux\" . - Ignore the download button on the right hand side, instead open up the release notes . - See the line with a link \"HERE\": \"For Debian/Ubuntu users, please update your APT source see HERE \".","title":"Getting to the correct URL"},{"location":"ubiquiti/#installation","text":"It's best to start by installing/confirming the MongoDB version you want to use, and then install Ubiquiti's unifi software. The reason for that is that unifi will create start running and create a mongo database immediately with whatever MongoDB version is already installed or installs automatically with unifi . Then, when updating the MongoDB in the next step, that database might be incompatible and you might have to remove it.","title":"Installation"},{"location":"ubiquiti/#installing-mongodb","text":"We are following MongoBD instructions which succesfully installed version 3.6.5 . Beware! Don't use this page , it is out of date! sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5 echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.6.list sudo apt-get update sudo apt-get install -y mongodb-org Optionally a specific version can pinned, but we skip that: echo \"mongodb-org hold\" | sudo dpkg --set-selections echo \"mongodb-org-server hold\" | sudo dpkg --set-selections echo \"mongodb-org-shell hold\" | sudo dpkg --set-selections echo \"mongodb-org-mongos hold\" | sudo dpkg --set-selections echo \"mongodb-org-tools hold\" | sudo dpkg --set-selections Start the systemd service mongod . Note that is is mongod without a b at the end! Confirm it's status: systemctl start mongod systemctl status mongod \u25cf mongod.service - High-performance, schema-free document-oriented database Loaded: loaded (/lib/systemd/system/mongod.service; disabled; vendor preset: enabled) Active: active (running) since Sun 2018-06-10 10:47:09 PDT; 10s ago Docs: https://docs.mongodb.org/manual Main PID: 27814 (mongod) Tasks: 23 Memory: 38.9M CPU: 636ms CGroup: /system.slice/mongod.service \u2514\u250027814 /usr/bin/mongod --config /etc/mongod.conf There is compatibility problem between mongodb 3.6 and unifi 5.7 . The latter is issues mongo commands that use a flag only found in mongodb 3.4 . It is discussed here . Although it might be possible to use the mongodb setFeatureCompatibilityVersion function , we used a different workaround instead: sudo mv /usr/lib/unifi/bin/mongodb /usr/lib/unifi/bin/mongodb.old cat << _EOF > /usr/lib/unifi/bin/mongodb #!/bin/bash echo \"[ $date ]: ${*}\" >> /usr/lib/unifi/logs/mongod-call-args.log exec /usr/bin/mongod ${*//--nohttpinterface/} _EOF chmod 755 /usr/lib/unifi/bin/mongodb The line echo \"[ $date ]: ${*}\" >> /usr/lib/unifi/logs/mongod-call-args.log writes the arguments passed by unifi to mongod into a log file for veiwing. The line: exec /usr/bin/mongod ${*//--nohttpinterface/} removes the offending mongodb 3.6\" incompatible argument from the arguments passed by *unifi .","title":"Installing MongoDB"},{"location":"ubiquiti/#installing-the-ubiquiti-software","text":"WARNING - installing the desired *MongoDB version first is recommended.* UniFi - How to Install & Update via APT on Debian or Ubuntu echo 'deb http://www.ubnt.com/downloads/unifi/debian stable ubiquiti' | sudo tee /etc/apt/sources.list.d/100-ubnt-unifi.list sudo wget -O /etc/apt/trusted.gpg.d/unifi-repo.gpg https://dl.ubnt.com/unifi/unifi-repo.gpg sudo apt-get update sudo apt-get install unifi","title":"Installing the Ubiquiti software"},{"location":"ubiquiti/#log-files","text":"/usr/lib/unifi/logs/server.log /usr/lib/unifi/logs/mongod.log sudo cat /usr/lib/unifi/logs/server.log [2018-06-10 09:32:36,020] <main> WARN system - reload system.properties failed: file not found [2018-06-10 09:32:36,478] <main> WARN system - reload system.properties failed: file not found [2018-06-10 09:32:37,806] <launcher> INFO system - *** Running for the first time, creating identity *** [2018-06-10 09:32:37,808] <launcher> INFO system - UUID: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx [2018-06-10 09:32:37,808] <launcher> WARN system - reload system.properties failed: file not found [2018-06-10 09:32:37,810] <launcher> INFO system - ====================================================================== [2018-06-10 09:32:37,810] <launcher> INFO system - UniFi 5.7.23 (build atag_5.7.23_10670 - release) is started [2018-06-10 09:32:37,810] <launcher> INFO system - ====================================================================== [2018-06-10 09:32:37,818] <launcher> INFO system - BASE dir:/usr/lib/unifi [2018-06-10 09:32:37,832] <launcher> INFO system - Current System IP: 172.18.0.1 [2018-06-10 09:32:37,847] <launcher> INFO system - Hostname: user-desktop [2018-06-10 09:32:38,195] <launcher> INFO system - Valid keystore is missing. Generating one ... [2018-06-10 09:32:38,196] <launcher> INFO system - Generating Certificate[UniFi]... please wait... [2018-06-10 09:32:38,930] <launcher> INFO system - Certificate[UniFi] generated! [2018-06-10 09:32:40,224] <launcher> INFO db - waiting for db connection... [2018-06-10 09:32:40,724] <launcher> INFO db - Connecting to mongodb://127.0.0.1:27117 [2018-06-10 09:32:42,645] <launcher> INFO db - Connecting to mongodb://127.0.0.1:27117 .... sudo cat /usr/lib/unifi/logs/monodb.log ... systemctl -a | grep unifi unifi.service loaded active running unifi systemctl -a | grep mongod mongod.service loaded active running High-performance, schema-free document-oriented database \u25cf mongodb.service masked inactive dead mongodb.service","title":"Log files"},{"location":"ubiquiti/#make-wifi-unit-and-unifi-talk-to-each-other","text":"find local lan ip addresses of wifi and PC ssh into wifi unit and and tell it the address of the PC to initiate handshake open unifi program in PC browser to return handshake with Wifi unit again ssh into wifi unit for final acknowledge of handshake.","title":"Make Wifi unit and Unifi talk to each other"},{"location":"ubiquiti/#find-local-lan-ip-addresses-of-wifi-and-pc","text":"The Wifi unit, just by being plugged in to the LAN, should have started up and the light should be solid blue. It will have received an IP address via DHCP. Find the ipaddresses of - the Linux PC hosting unifi - the Wifi unit. Use ifconfig to see the PC address. Below it follows inet addr: ifconfig enp2s0 Link encap:Ethernet HWaddr xxxxxxxxxxxxxx inet addr:192.168.1.69 Bcast:192.168.1.255 Mask:255.255.255.0 Use nmap to see the Wifi address. nmap -sP will ping all the addresses over a given range, and gather information about the responses. The range is determined by the Mask: result returned by ifconfig above. In this example case, the last first 24 bits of the address are masked. Translating that into CIDR format we get 192.168.1.0/24 , which is passed to nmap . As shown below, the Wifi is identifiable by it's name 'Ubiquiti Networks'. sudo nmap -sP 192.168.1.0/24 ... Nmap scan report for unknownF09FC273B889 (192.168.1.70) Host is up (-0.100s latency). MAC Address: xx:xx:xx:xx:xx:xx (Ubiquiti Networks) ... In the above example we found: PC addr Wifi Addr 192.168.1.68 192.168.1.70","title":"find local lan ip addresses of wifi and PC"},{"location":"ubiquiti/#ssh-into-wifi-unit-set-pc-address","text":"ssh into the device as user ubnt with the password shown here . ssh ubnt@192.168.1.70 ubnt@192.168.1.70's password: .... BusyBox v1.19.4 (2016-01-19 22:59:59 PST) built-in shell (ash) Enter 'help' for a list of built-in commands. BZ.v3.4.14# help UniFi Command Line Interface - Ubiquiti Networks info display device information set-default restore to factory default set-inform <inform_url> attempt inform URL (e.g. set-inform http://192.168.0.8:8080/inform) upgrade <firmware_url> upgrade firmware (e.g. upgrade http://192.168.0.8/unifi_fw.bin) reboot reboot the device BZ.v3.4.14# set-inform http://192.168.1.69:8080/inform As can be seen, in addition to the address of the PC, a port must also be specified. Ther default is 8080, but if that port is being used for something else on the PC, another port can be shosen.","title":"ssh into wifi unit, set PC address"},{"location":"ubiquiti/#open-unifi-program-in-pc-browser-to-return-handshake-with-wifi-unit","text":"** firewall ** The PC might have a firewall blocking communications from the Wifi address. If ufw is the fireall, then communication from the Wifi can be allowed as follows: sudo ufw allow from 192.168.1.70 View the rule: sudo ufw status numbered Status: active To Action From -- ------ ---- [ 1] Anywhere ALLOW IN 192.168.1.70 NOTE: During normal operation of the Wifi after setup it is not necessary to leave that hole in the firewall open. It can be closed like this: sudo ufw status numbered ... [ 1] Anywhere ALLOW IN 192.168.1.70 sudo ufw delete 1 Deleting: allow from 192.168.1.70 Proceed with operation (y|n)? y Rule deleted Enter in browser address bar: https://localhost:8443 ** untrusted certificate The browser will probably refuse to connect because of an untrusted certificate. Using the advanced options button, enable an exception for that certificate. Then the setup can continue. You should see the unit appear ready to connect. Enter a lot of ID's and passwords: SSID and password : To be used from devices, e.g. smart phones, to connect to the Wifi admin and password : To log into the unifi program device authentication and password : To ssh into the Wifi","title":"open unifi program in PC browser to return handshake with Wifi unit"},{"location":"ubiquiti/#again-ssh-into-wifi-unit-and-set-inform","text":"Login with new id/password given for device authentification , and enter the same set-inform command as before. ssh <device-auth-id>@192.168.1.70 <device-auth-id>@192.168.1.70's password: <device-auth-id password> BusyBox v1.19.4 (2016-01-19 22:59:59 PST) built-in shell (ash) Enter 'help' for a list of built-in commands. BZ.v3.4.14# set-inform http://192.168.1.69:8080/inform End of post","title":"again ssh into wifi unit and set-inform"}]}